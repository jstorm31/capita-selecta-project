module ServiceModule;

export *;

import * from DatabaseModule;
import * from PaymentProvider;

// Abstraction of the backend system
interface Service {
    Bool execute(Duration deadline, Time calltime);
}

class Service(Database db, List<PaymentProvider> providers, Int registerCost) implements Service {
    Bool execute(Duration deadline, Time calltime) {
        Int customerId = random(1000000);
        println("[Registering customer: " + toString(customerId) + ", time: " +toString(timeValue(now()))+"] Service processing job, available time is "+toString(deadline));

        await db!read();
        PaymentProvider provider = nth(providers, random(2));
        PaymentCard card = PaymentCard("John Doe", 1234123412341234, 522, 123);
        Float balance = await provider!balance(card);

        if (balance > 100.0) {
            println("[Time: "+toString(timeValue(now()))+"] Customer " + toString(customerId) + " has sufficent balance: " + toString(balance));
            [Cost: registerCost] skip;
            await db!write();
        } else {
            [Cost: registerCost / 4] skip;
            println("[Time: "+toString(timeValue(now()))+"] Customer " + toString(customerId) + " has insufficent balance: " + toString(balance));
        }

        Rat remainingTime = timeDifference(calltime,now());
        println("[Time: "+toString(timeValue(now()))+"] Registered the customer " + toString(customerId));
        if ((durationValue(deadline) - remainingTime) > 0) {
            println("[Time: "+toString(timeValue(now()))+"] The registration succeeded on time! [customer: " + toString(customerId) + "]");
        } else {
            println("[Time: "+toString(timeValue(now()))+"] The registration violated deadline! [customer: " + toString(customerId) + "]");
        }
        return (durationValue(deadline) - remainingTime) > 0;
    }
}
