module DeploymentComponent;

export *;

import * from ABS.DC;
import * from DatabaseModule;
import * from AutoscalerModule;
import * from ClientModule;
import * from LoadBalancerModule;
import * from WorkerModule;
import * from ServiceModule;
import * from CounterModule;
import * from ServiceEndpointModule;
import * from PaymentProvider;

type Parameters = Map<String, Int>;

interface Simulation {
  Unit start();
}

class Simulation(Parameters parameters, Duration clientDeadline) implements Simulation {
    
    // Parameters
    Int workersCount = fromJust(lookup(parameters, "workersCount"));
    Int maxWorkersCount = fromJust(lookup(parameters, "maxWorkersCount"));
    Int clientsCount = fromJust(lookup(parameters, "clientsCount"));
    Int clientJobsCount = fromJust(lookup(parameters, "clientJobsCount"));
    Int taskCost = fromJust(lookup(parameters, "taskCost"));
    Int dbTransactionCost = fromJust(lookup(parameters, "dbTransactionCost"));
    Int workerSpeed = fromJust(lookup(parameters, "workerSpeed"));
    Int autoScaleInterval = fromJust(lookup(parameters, "autoScaleInterval"));
    Int vendorSpeed = fromJust(lookup(parameters, "vendorSpeed"));

    Counter counter;

    Unit run() {
        counter = new Counter(clientsCount);
    }

    Unit start() {
        // Create cloud providers
        CloudProvider cloud = new CloudProvider("Cloud");
        CloudProvider vendorCloud1 = new CloudProvider("Vendor Cloud 1");
        CloudProvider vendorCloud2 = new CloudProvider("Vendor Cloud 2");
        CloudProvider vendorCloud3 = new CloudProvider("Vendor Cloud 3");
        println("[Time: "+toString(timeValue(now()))+"] Created the CloudProvider");

        // Create server machines
        DC frontendServer = await cloud!launchInstance(map[Pair(Speed, workerSpeed * maxWorkersCount)]);
        DC paymentServer1 = await vendorCloud1!launchInstance(map[Pair(Speed, workerSpeed * maxWorkersCount)]);
        DC paymentServer2 = await vendorCloud2!launchInstance(map[Pair(Speed, workerSpeed * maxWorkersCount)]);
        DC paymentServer3 = await vendorCloud3!launchInstance(map[Pair(Speed, workerSpeed * maxWorkersCount)]);

        // Vendors
        [DC: paymentServer1] PaymentProvider prov1 = new PaymentProvider(Visa, vendorSpeed + random(3));
        [DC: paymentServer2] PaymentProvider prov2 = new PaymentProvider(MasterCard, vendorSpeed + random(3));
        [DC: paymentServer3] PaymentProvider prov3 = new PaymentProvider(Maestro, vendorSpeed + random(3));
        List<PaymentProvider> providers = list[prov1, prov2, prov3];

        // Deploy the system
        [DC: frontendServer] LoadBalancer lb = new RoundRobinLoadBalancer(counter, clientsCount * clientJobsCount);
        [DC: frontendServer] Autoscaler autoScaler = new Autoscaler(cloud, providers, lb, workersCount, maxWorkersCount, workerSpeed, autoScaleInterval, taskCost, dbTransactionCost, counter);
        [DC: frontendServer] ServiceEndpoint endpoint = new ServiceEndpoint(lb, clientDeadline);
    
        println("\n========== Starting " + toString(clientsCount) + " clients... ==========");

        // Start up clients in batches
        Int batch = 500; // process x clients at a time

        if (clientsCount <= batch) {
            await this!runClients(clientsCount, endpoint);
            lb.setClientsStarted(True);
        } else {
            Int i = 0;
            while (i < clientsCount) {
                await this!runClients(batch, endpoint);
                if (i == 0) {
                    lb.setClientsStarted(True);
                }
                i = i + batch;
            }
        }

        println("========== Started 100% of clients ==========\n");
        println("[Time: "+toString(timeValue(now()))+"] ******CREATED " +toString(clientsCount)+"  OPEN CLIENTS  WITH "  +toString(clientJobsCount)+ " JOBS EACH");
    }

    Unit runClients(Int count, ServiceEndpoint endpoint) {
        Int i = 0;

        while (i < count) {
            new OpenClient(endpoint, 1, taskCost, clientJobsCount, counter);
            i = i + 1;
        }
        println("Started all clients in a batch");
    }
}

{
    Parameters parameters = map[
        Pair("workersCount", 1),
        Pair("maxWorkersCount", 1),
        Pair("clientsCount", 400), // Amount of people trying to buy tickets (found on the internet) + reserve 20%
        Pair("clientJobsCount", 1),
        Pair("taskCost", 10), // Estimated
        Pair("dbTransactionCost", 1),
        Pair("workerSpeed", 2000), // Number of requests handled per second by server (estimated for processor with 2 cores with 2GHz frequency)
        Pair("autoScaleInterval", 2), // In time units
        Pair("vendorSpeed", 4) // In time units
    ];
    Duration deadline = Duration(5); // 10 minutes for 6_000_000 clients is 1minute for 600_000 clients

    Simulation simulation = new Simulation(parameters, deadline);
    simulation.start();
}
