module PaymentProvider;

export *;
import * from ABS.DC;

data PaymentProviderType = Visa | MasterCard | Maestro;

data PaymentCard = PaymentCard(PaymentProviderType, String name, Int number, Int validity, Int cvc);

interface PaymentProvider {
    Float balance(PaymentCard card);
    Unit pay(PaymentCard card);
}

class PaymentProvider(PaymentProviderType brand, Int maxResponseTime) implements PaymentProvider {
    Float balance(PaymentCard card) {
        await duration(maxResponseTime, maxResponseTime);
        Float balance = float((random(10000) - random(1000)) / (1 + random(9))); // Generate random rational number
        return balance;
    }    

    Unit pay(PaymentCard card) {
        await duration(maxResponseTime, maxResponseTime);
    }
}

// Test
/* {
    CloudProvider cloud = new CloudProvider("cloud");
    DC server = await cloud!launchInstance(map[Pair(Speed, 1000)]);
    [DC: server] PaymentProvider provider = new PaymentProvider(Visa, 100);
    println("[Time: "+toString(timeValue(now()))+"] Created the CloudProvider");
    println("[Time: "+toString(timeValue(now()))+"] Checking balance...");

    PaymentCard card = PaymentCard("John Doe", 1234123412341234, 522, 123);
    Float balance = await provider!balance(card);
    println("[Time: "+toString(timeValue(now()))+"] Balance: " + toString(balance));
} */
